import React, { useState, useEffect, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, deleteDoc, doc, updateDoc } from 'firebase/firestore';
import { Users, AlertTriangle, Search, Edit, RefreshCw, Trash2, X, Plus, Crown, DollarSign, Calendar, Mail, Phone, ArrowRight } from 'lucide-react';

// --- Firebase Configuration ---
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

// --- Helper Functions ---
const formatDate = (d) => d ? new Date(d).toLocaleDateString('pt-BR', {timeZone: 'UTC'}) : 'N/A';
const calculateEndDate = (startDate, plan) => { if (!startDate) return ''; const d = new Date(startDate); d.setUTCHours(0,0,0,0); switch (plan) { case 'Diária': d.setUTCDate(d.getUTCDate() + 1); break; case 'Semanal': d.setUTCDate(d.getUTCDate() + 7); break; case 'Mensal': d.setUTCMonth(d.getUTCMonth() + 1); break; default: return ''; } return d.toISOString().split('T')[0]; };
const getStudentStatus = (startDateString, endDateString) => { const today = new Date(); today.setUTCHours(0, 0, 0, 0); if (!endDateString || !startDateString) return { key: 'SEM_DATA', text: 'Sem data', color: 'bg-gray-400', textColor: 'text-gray-800 bg-gray-100', percentage: 0 }; const endDate = new Date(endDateString); endDate.setUTCHours(0, 0, 0, 0); const startDate = new Date(startDateString); startDate.setUTCHours(0, 0, 0, 0); const totalPlanDuration = (endDate - startDate) / (1000 * 60 * 60 * 24); const diffTime = endDate - today; const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); let percentage = (totalPlanDuration > 0) ? Math.max(0, Math.min(100, (diffDays / totalPlanDuration) * 100)) : 0; if (diffDays < 0) return { key: 'VENCIDO', text: 'Vencido', color: 'bg-red-500', textColor: 'text-red-800 bg-red-100', percentage: 0 }; if (diffDays === 0) return { key: 'VENCENDO', text: 'Vence Hoje!', color: 'bg-orange-500', textColor: 'text-orange-800 bg-orange-100', percentage: 5 }; if (diffDays === 1) return { key: 'VENCENDO', text: 'Vence Amanhã', color: 'bg-orange-500', textColor: 'text-orange-800 bg-orange-100', percentage: 10 }; if (diffDays <= 7) return { key: 'VENCENDO', text: `Vence em ${diffDays} dias`, color: 'bg-yellow-500', textColor: 'text-yellow-800 bg-yellow-100', percentage }; return { key: 'ATIVO', text: 'Ativo', color: 'bg-green-500', textColor: 'text-green-800 bg-green-100', percentage }; };

// --- FULL COMPONENT DEFINITIONS ---

const Dashboard = ({ students, activeFilter, setActiveFilter }) => {
    const stats = useMemo(() => ({ total: students.length, active: students.filter(s => getStudentStatus(s.startDate, s.endDate).key === 'ATIVO').length, expiringSoon: students.filter(s => getStudentStatus(s.startDate, s.endDate).key === 'VENCENDO').length, expired: students.filter(s => getStudentStatus(s.startDate, s.endDate).key === 'VENCIDO').length }), [students]);
    const FilterButton = ({ filterKey, label, count, icon }) => { const isActive = activeFilter === filterKey; const base = "w-full text-left p-3 rounded-lg transition-all flex items-center justify-between"; const active = "bg-indigo-600 text-white shadow"; const inactive = "bg-white hover:bg-gray-50"; return (<button onClick={() => setActiveFilter(filterKey)} className={`${base} ${isActive ? active : inactive}`}><div className="flex items-center">{icon}<span className="font-semibold">{label}</span></div><span className={`px-2 py-0.5 rounded-full text-xs font-bold ${isActive ? 'bg-white text-indigo-700' : 'bg-gray-200 text-gray-700'}`}>{count}</span></button>); };
    return (<div className="mb-6"><h2 className="text-xl font-bold text-gray-800 mb-3">Filtros Rápidos</h2><div className="grid grid-cols-2 gap-3"><FilterButton filterKey="TODOS" label="Todos" count={stats.total} icon={<Users size={18} className="mr-2"/>} /><FilterButton filterKey="ATIVO" label="Ativos" count={stats.active} icon={<Crown size={18} className="mr-2"/>} /><FilterButton filterKey="VENCENDO" label="Vencendo" count={stats.expiringSoon} icon={<AlertTriangle size={18} className="mr-2"/>} /><FilterButton filterKey="VENCIDO" label="Vencidos" count={stats.expired} icon={<X size={18} className="mr-2"/>}/></div></div>);
};

const StudentCard = ({ student, onSelect }) => {
    const status = getStudentStatus(student.startDate, student.endDate);
    return (<div className="bg-white rounded-xl shadow-md mb-4 overflow-hidden cursor-pointer transition-all hover:shadow-lg hover:scale-[1.02]" onClick={() => onSelect(student)}><div className="p-4 flex items-center justify-between"><div className="flex items-center w-full min-w-0"><div className="bg-indigo-500 rounded-full h-12 w-12 flex items-center justify-center text-white font-bold text-xl shrink-0">{student.name.charAt(0).toUpperCase()}</div><div className="ml-4 w-full min-w-0"><p className="font-bold text-gray-800 truncate">{student.name}</p><p className={`text-sm font-medium px-2 py-0.5 rounded-full inline-block mt-1 ${status.textColor}`}>{status.text}</p></div></div><ArrowRight className="text-gray-400 shrink-0 ml-2" size={20} /></div><div className="bg-gray-200 h-1.5 w-full"><div className={`${status.color} h-1.5 rounded-r-full`} style={{ width: `${status.percentage}%` }}></div></div></div>);
};

const StudentFormModal = ({ isOpen, onClose, onSubmit, initialData = {}, title, submitButtonText, error, setError }) => {
    if (!isOpen) return null;
    const [formData, setFormData] = useState({ name: '', email: '', phone: '', plan: 'Mensal', paymentMethod: 'PIX', startDate: new Date().toISOString().split('T')[0], ...initialData });
    const endDate = useMemo(() => calculateEndDate(formData.startDate, formData.plan), [formData.startDate, formData.plan]);
    const handleChange = (e) => setFormData(prev => ({...prev, [e.target.id]: e.target.value}));
    const handleSubmit = (e) => { e.preventDefault(); if (!formData.name || !formData.email) { setError("Nome e Email são obrigatórios."); return; } onSubmit({ ...formData, endDate }); };
    useEffect(() => { setError(''); }, [isOpen]);
    return (<div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4"><div className="bg-white rounded-2xl shadow-2xl w-full max-w-md transform transition-all"><div className="p-6"><div className="flex justify-between items-start mb-4"><h2 className="text-2xl font-bold text-gray-900">{title}</h2><button onClick={onClose} className="text-gray-400 hover:text-gray-600"><X size={24}/></button></div><form onSubmit={handleSubmit} className="space-y-4">{error && <p className="text-red-500 bg-red-100 p-3 rounded-lg">{error}</p>}<div><label htmlFor="name" className="block text-sm font-medium text-gray-700">Nome Completo</label><input type="text" id="name" value={formData.name} onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3" required /></div><div><label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label><input type="email" id="email" value={formData.email} onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3" required /></div><div><label htmlFor="phone" className="block text-sm font-medium text-gray-700">Telefone</label><input type="tel" id="phone" value={formData.phone} onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3" /></div><div><label htmlFor="plan" className="block text-sm font-medium text-gray-700">Plano</label><select id="plan" value={formData.plan} onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"><option>Mensal</option><option>Semanal</option><option>Diária</option></select></div><div><label htmlFor="paymentMethod" className="block text-sm font-medium text-gray-700">Forma de Pagamento</label><select id="paymentMethod" value={formData.paymentMethod} onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"><option>PIX</option><option>Cartão de Crédito</option><option>Cartão de Débito</option><option>Dinheiro</option></select></div><div><label htmlFor="startDate" className="block text-sm font-medium text-gray-700">Data de Início</label><input type="date" id="startDate" value={formData.startDate} onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3" /></div><div><label className="block text-sm font-medium text-gray-700">Data de Vencimento</label><p className="mt-1 text-gray-900 font-semibold bg-gray-100 p-2 rounded-md">{formatDate(endDate)}</p></div><button type="submit" className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">{submitButtonText}</button></form></div></div></div>);
};

const StudentDetailModal = ({ student, onClose, onDelete, onEdit, onRenew }) => {
    if (!student) return null;
    const status = getStudentStatus(student.startDate, student.endDate);
    return (<div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4"><div className="bg-white rounded-2xl shadow-2xl w-full max-w-md transform transition-all"><div className="p-6"><div className="flex justify-between items-start"><h2 className="text-2xl font-bold text-gray-900">{student.name}</h2><button onClick={onClose} className="text-gray-400 hover:text-gray-600"><X size={24}/></button></div><p className={`mt-1 font-semibold px-2 py-0.5 rounded-full inline-block ${status.textColor}`}>{status.text}</p><div className="mt-6 space-y-4 text-gray-700"><div className="flex items-center"><Mail size={18} className="mr-3 text-indigo-500"/><span>{student.email || 'N/A'}</span></div><div className="flex items-center"><Phone size={18} className="mr-3 text-indigo-500"/><span>{student.phone || 'N/A'}</span></div><div className="flex items-center"><Crown size={18} className="mr-3 text-indigo-500"/><span>{student.plan}</span></div><div className="flex items-center"><DollarSign size={18} className="mr-3 text-indigo-500"/><span>{student.paymentMethod}</span></div></div><div className="mt-6 bg-gray-50 p-4 rounded-lg flex justify-around text-center"><div><p className="text-sm text-gray-500">Início</p><p className="font-semibold text-gray-800 flex items-center justify-center"><Calendar size={16} className="mr-2"/>{formatDate(student.startDate)}</p></div><div><p className="text-sm text-gray-500">Vencimento</p><p className="font-semibold text-gray-800 flex items-center justify-center"><Calendar size={16} className="mr-2"/>{formatDate(student.endDate)}</p></div></div></div><div className="bg-gray-50 px-6 py-4 rounded-b-2xl grid grid-cols-2 gap-3"><button onClick={() => onEdit(student)} className="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700"><Edit size={16} className="mr-2" />Editar</button><button onClick={() => onRenew(student)} className="w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700"><RefreshCw size={16} className="mr-2" />Renovar</button><button onClick={() => onDelete(student.id)} className="col-span-2 w-full flex items-center justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-red-700 bg-red-100 hover:bg-red-200"><Trash2 size={16} className="mr-2" />Excluir Aluno</button></div></div></div>);
};

const RenewModal = ({ isOpen, onClose, onConfirm, student }) => {
    if (!isOpen || !student) return null;
    const [paymentMethod, setPaymentMethod] = useState(student.paymentMethod);
    return (<div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4"><div className="bg-white rounded-2xl shadow-2xl w-full max-w-md transform transition-all"><div className="p-6"><div className="flex justify-between items-start mb-4"><h2 className="text-2xl font-bold text-gray-900">Renovar Plano</h2><button onClick={onClose} className="text-gray-400 hover:text-gray-600"><X size={24}/></button></div><p className="text-gray-700">A renovar o plano <span className="font-bold">{student.plan}</span> para <span className="font-bold text-indigo-600">{student.name}</span>.</p><div className="my-4"><label htmlFor="renewPaymentMethod" className="block text-sm font-medium text-gray-700">Forma de Pagamento da Renovação</label><select id="renewPaymentMethod" value={paymentMethod} onChange={(e) => setPaymentMethod(e.target.value)} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3"><option>PIX</option><option>Cartão de Crédito</option><option>Cartão de Débito</option><option>Dinheiro</option></select></div><div className="flex justify-end space-x-3"><button onClick={onClose} className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Cancelar</button><button onClick={() => onConfirm(student, paymentMethod)} className="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700">Confirmar</button></div></div></div></div>);
};

// --- App Core Component (the main UI) ---
const AppCore = ({ db, ownerUid }) => {
    const [students, setStudents] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [activeFilter, setActiveFilter] = useState('TODOS');
    const [modalError, setModalError] = useState('');
    
    // Modal states
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [isRenewModalOpen, setIsRenewModalOpen] = useState(false);
    const [selectedStudent, setSelectedStudent] = useState(null);
    const [studentToEdit, setStudentToEdit] = useState(null);
    const [studentToRenew, setStudentToRenew] = useState(null);

    useEffect(() => {
        setIsLoading(true);
        const q = collection(db, `artifacts/${appId}/users/${ownerUid}/students`);
        const unsubscribe = onSnapshot(q, (snapshot) => {
            const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            data.sort((a,b) => { const sA=getStudentStatus(a.startDate, a.endDate), sB=getStudentStatus(b.startDate, b.endDate); const order={'VENCENDO':1, 'VENCIDO':2, 'ATIVO':3, 'SEM_DATA':4}; return order[sA.key] - order[sB.key] || new Date(a.endDate) - new Date(b.endDate); });
            setStudents(data);
            setIsLoading(false);
        }, (err) => { console.error("Data loading error:", err); setIsLoading(false); });

        return () => unsubscribe();
    }, [db, ownerUid]);
    
    // CRUD handlers
    const getDocRef = (id) => doc(db, `artifacts/${appId}/users/${ownerUid}/students/${id}`);
    const handleAdd = async (data) => { setModalError(''); try { await addDoc(collection(db, `artifacts/${appId}/users/${ownerUid}/students`), data); setIsAddModalOpen(false); } catch(e) { console.error("Error adding student:", e); setModalError("Erro ao adicionar aluno."); }};
    const handleUpdate = async (data) => { setModalError(''); try { await updateDoc(getDocRef(data.id), data); setIsEditModalOpen(false); setStudentToEdit(null); setSelectedStudent(null); } catch(e) { console.error(e); setModalError("Erro ao atualizar."); }};
    const handleDelete = async (id) => { if(window.confirm('Tem certeza que deseja excluir este aluno?')) { try { await deleteDoc(getDocRef(id)); setSelectedStudent(null); } catch(e) { alert("Erro ao excluir."); }} };
    const handleRenew = async (student, payment) => { const start=new Date().toISOString().split('T')[0]; const end=calculateEndDate(start, student.plan); try { await updateDoc(getDocRef(student.id), { startDate: start, endDate: end, paymentMethod: payment }); setIsRenewModalOpen(false); setStudentToRenew(null); setSelectedStudent(null); } catch(e) { alert("Erro ao renovar."); }};
    const openEdit = (s) => { setSelectedStudent(null); setStudentToEdit(s); setIsEditModalOpen(true); };
    const openRenew = (s) => { setSelectedStudent(null); setStudentToRenew(s); setIsRenewModalOpen(true); };

    const filteredStudents = useMemo(() => students.filter(s => (activeFilter === 'TODOS' || getStudentStatus(s.startDate, s.endDate).key === activeFilter) && s.name.toLowerCase().includes(searchTerm.toLowerCase())), [students, searchTerm, activeFilter]);

    return (
        <div className="bg-gray-100 min-h-screen font-sans relative z-10">
            <div className="container mx-auto p-4 max-w-lg">
                <header className="text-center my-6 relative"><h1 className="text-4xl font-bold text-indigo-600">Mambi Academia</h1><p className="text-gray-600 mt-2">Gestão de alunos, simples e eficiente.</p></header>
                <Dashboard students={students} activeFilter={activeFilter} setActiveFilter={setActiveFilter} />
                <div className="relative mb-4"><Search className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400" size={20}/><input type="text" placeholder="Pesquisar por nome..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="w-full pl-12 pr-4 py-3 border border-gray-300 rounded-full shadow-sm"/></div>
                <main>{isLoading ? <p className="text-center text-gray-500 py-10">A carregar alunos...</p> : filteredStudents.length === 0 ? (<div className="text-center bg-white p-8 rounded-xl shadow-md"><h3 className="text-xl font-semibold text-gray-800">{students.length > 0 ? "Nenhum resultado" : "Nenhum aluno cadastrado"}</h3><p className="text-gray-500 mt-2">{students.length > 0 ? "Tente outro filtro." : "Clique no botão '+' para começar."}</p></div>) : (<div>{filteredStudents.map(s => (<StudentCard key={s.id} student={s} onSelect={setSelectedStudent} />))}</div>)}</main>
            </div>
            
            {/* The Floating Action Button with a higher z-index */}
            <button onClick={() => setIsAddModalOpen(true)} className="fixed bottom-6 right-6 bg-indigo-600 text-white rounded-full p-4 shadow-lg hover:bg-indigo-700 transition-transform hover:scale-110 z-40"><Plus size={28} /></button>

            {/* Modals are rendered here. Their `fixed` position and `z-50` will place them above everything. */}
            <StudentFormModal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)} onSubmit={handleAdd} title="Novo Aluno" submitButtonText="Cadastrar Aluno" error={modalError} setError={setModalError} />
            <StudentFormModal isOpen={isEditModalOpen} onClose={() => {setIsEditModalOpen(false); setStudentToEdit(null);}} onSubmit={handleUpdate} initialData={studentToEdit} title="Editar Aluno" submitButtonText="Salvar Alterações" error={modalError} setError={setModalError} />
            <StudentDetailModal student={selectedStudent} onClose={() => setSelectedStudent(null)} onDelete={handleDelete} onEdit={openEdit} onRenew={openRenew} />
            <RenewModal isOpen={isRenewModalOpen} onClose={() => {setIsRenewModalOpen(false); setStudentToRenew(null);}} onConfirm={handleRenew} student={studentToRenew} />
        </div>
    );
};


// --- TOP LEVEL CONTROLLER ---
export default function App() {
    const [appState, setAppState] = useState({ status: 'initializing', db: null, ownerUid: null, error: null });

    useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const db = getFirestore(app);
            const auth = getAuth(app);
            
            onAuthStateChanged(auth, (user) => {
                if (user) {
                    setAppState({ status: 'r
